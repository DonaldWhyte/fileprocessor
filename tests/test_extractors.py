import unittest
import sys
import os
sys.path.append(os.environ.get("PROJECT_ROOT_DIRECTORY", "."))

import io
from fileprocessor.extractors import *



# Constant which determines filename of test file
TEST_FILENAME = ".__fileprocessor_test.txt"

def createTestFile(contents):
	"""Write specific data to test file.

	Overwrites any existing data in file.

	Arguments:
	contents -- Contents to store in file

	"""
	with open(TEST_FILENAME, "w") as f:
		f.write(contents)

def removeTestFile():
	"""Delete test file from filesystem."""
	if os.path.isfile(TEST_FILENAME):
		os.remove(TEST_FILENAME)

# Mock sublcasses to test extractors.
# All of these return whatever data was generated by
# the abstract superclass so it can be tested.
class MockByteExtractor(ByteExtractor):

	def extractFromBytes(self, data):
		return data

class MockByteStreamExtractor(ByteStreamExtractor):

	def extractFromStream(self, stream):
		# Read from the stream now, since it'll be
		# closed by the time it gets to the testing code
		contents = stream.read()
		return stream, contents

class MockTextExtractor(TextExtractor):

	def extractFromString(self, data):
		return data

class MockTextStreamExtractor(TextStreamExtractor):

	def extractFromStream(self, stream):
		contents = stream.read()
		return stream, contents


class TestByteExtractor(unittest.TestCase):

	def setUp(self):
		self.byteExtractor = ByteExtractor()
		self.concreteExtractor = MockByteExtractor()
		createTestFile("byte")

	def tearDown(self):
		self.byteExtractor = None
		self.concreteExtractor = None
		removeTestFile()

	def test_extract(self):
		# Test invalid type
		with self.assertRaises(TypeError):
			self.byteExtractor.extract(44)		
		# Test with non-existent file
		with self.assertRaises(IOError):
			self.byteExtractor.extract("some_file.txt")
		with self.assertRaises(IOError):
			self.concreteExtractor.extract("some_file.txt")
		# Test with existing file
		with self.assertRaises(NotImplementedError):
			self.byteExtractor.extract(TEST_FILENAME)
		self.assertEqual(self.concreteExtractor.extract(TEST_FILENAME), b"byte")

	def test_extractFromBytes(self):
		with self.assertRaises(NotImplementedError):
			self.byteExtractor.extractFromBytes( bytes() )

class TestByteStreamExtractor(unittest.TestCase):

	def setUp(self):
		self.streamExtractor = ByteStreamExtractor()
		self.concreteExtractor = MockByteStreamExtractor()
		createTestFile("byte_stream")

	def tearDown(self):
		self.streamExtractor = None
		self.concreteExtractor = None
		removeTestFile()

	def test_extract(self):
		# Test invalid type
		with self.assertRaises(TypeError):
			self.streamExtractor.extract(44)
		# Test with non-existent file
		with self.assertRaises(IOError):
			self.streamExtractor.extract("some_file.txt")
		with self.assertRaises(IOError):
			self.concreteExtractor.extract("some_file.txt")
		# Test with existing file
		with self.assertRaises(NotImplementedError):
			self.streamExtractor.extract(TEST_FILENAME)
		stream, contents = self.concreteExtractor.extract(TEST_FILENAME)
		self.assertTrue( isinstance(stream, io.BufferedReader) )
		self.assertTrue( stream.closed )
		self.assertEqual(contents, b"byte_stream")

	def test_extractFromStream(self):
		# Construct a test stream
		stream = io.StringIO("some_stream_here")
		with self.assertRaises(NotImplementedError):
			self.streamExtractor.extractFromStream( stream )

class TestTextExtractor(unittest.TestCase):

	def setUp(self):
		self.textExtractor = TextExtractor()
		self.concreteExtractor = MockTextExtractor()
		createTestFile("text")

	def tearDown(self):
		self.textExtractor = None
		self.concreteExtractor = None
		removeTestFile()

	def test_extract(self):
		# Test invalid type
		with self.assertRaises(TypeError):
			self.textExtractor.extract(44)
		# Test with non-existent file
		with self.assertRaises(IOError):
			self.textExtractor.extract("some_file.txt")
		with self.assertRaises(IOError):
			self.concreteExtractor.extract("some_file.txt")
		# Test with existing file
		with self.assertRaises(NotImplementedError):
			self.textExtractor.extract(TEST_FILENAME)
		self.assertEqual(self.concreteExtractor.extract(TEST_FILENAME), "text")

	def test_extractFromString(self):
		with self.assertRaises(NotImplementedError):
			self.textExtractor.extractFromString("some_text_here")

class TestTextStreamExtractor(unittest.TestCase):

	def setUp(self):
		self.streamExtractor = TextStreamExtractor()
		self.concreteExtractor = MockTextStreamExtractor()
		createTestFile("text_stream")

	def tearDown(self):
		self.streamExtractor = None
		self.concreteExtractor = None
		removeTestFile()

	def test_extract(self):
		# Test invalid type
		with self.assertRaises(TypeError):
			self.streamExtractor.extract(44)
		# Test with non-existent file
		with self.assertRaises(IOError):
			self.streamExtractor.extract("some_file.txt")
		with self.assertRaises(IOError):
			self.concreteExtractor.extract("some_file.txt")
		# Test with existing file
		with self.assertRaises(NotImplementedError):
			self.streamExtractor.extract(TEST_FILENAME)
		stream, contents = self.concreteExtractor.extract(TEST_FILENAME)
		self.assertTrue( isinstance(stream, io.TextIOBase) )
		self.assertTrue( stream.closed )
		self.assertEqual(contents, "text_stream")

	def test_extractFromStream(self):
		# Construct a test stream
		stream = io.StringIO("some_stream_here")
		with self.assertRaises(NotImplementedError):
			self.streamExtractor.extractFromStream( stream )			